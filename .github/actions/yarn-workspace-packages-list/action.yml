name: 'Yarn Workspace Packages Listing'
description: 'List all packages which matches a certain condition in a Yarn Workspace.'
inputs:
  condition:
    description: 'The condition to match against the packages in shell script. Example: `[ -f "$package_location/package.json" ] && jq -e ".scripts.test" "$package_location/package.json"`'
    type: string
    required: true
    default: 'true'
outputs:
  package-paths:
    description: "A list of matched yarn workspace paths"
    value: ${{ steps.list-packages.outputs.package_paths_json }}
runs:
  using: "composite"
  steps:
    - name: List packages
      id: list-packages
      shell: bash
      run: |
        # List all packages which matches a certain condition in the Yarn Workspace.

        # Initialize an empty array to store matched package locations.
        matched_package_locations=()

        # Process each package location from the 'yarn workspaces list --json' output.
        while IFS= read -r line; do
          # Extract the package location.
          package_location=$(echo "$line" | jq -r '.location')

          # Exclude the root package.
          if [ "$package_location" = "." ]; then
            continue
          fi

          # Check if package matches the specified condition.
          if ${{ inputs.condition }} > /dev/null; then
            # Add the workspace location to the array
            matched_package_locations+=("$package_location")
          fi
        done < <(yarn workspaces list --json)

        # Convert the array of locations into a JSON array
        package_paths_json=$(jq -cn --argjson paths "$(jq -n '$ARGS.positional' --args "${matched_package_locations[@]}")" '$paths')

        # Output.
        echo "Matched packages:"
        echo "$package_paths_json" | jq .
        echo "package_paths_json=$package_paths_json" >> $GITHUB_OUTPUT
